{"ast":null,"code":"import { ElementRef, EventEmitter, Renderer2, SimpleChanges } from '@angular/core';\nimport { animate, style } from '@angular/animations';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/animations\";\nimport * as i2 from \"@fuse/components/drawer/drawer.service\";\nimport * as i3 from \"@fuse/services/utils/utils.service\";\nconst _c0 = [\"*\"];\nexport let FuseDrawerComponent = /*#__PURE__*/(() => {\n  class FuseDrawerComponent {\n    /**\n     * Constructor\n     */\n    constructor(_animationBuilder, _elementRef, _renderer2, _fuseDrawerService, _fuseUtilsService) {\n      this._animationBuilder = _animationBuilder;\n      this._elementRef = _elementRef;\n      this._renderer2 = _renderer2;\n      this._fuseDrawerService = _fuseDrawerService;\n      this._fuseUtilsService = _fuseUtilsService;\n      /* eslint-enable @typescript-eslint/naming-convention */\n\n      this.fixed = false;\n      this.mode = 'side';\n      this.name = this._fuseUtilsService.randomId();\n      this.opened = false;\n      this.position = 'left';\n      this.transparentOverlay = false;\n      this.fixedChanged = new EventEmitter();\n      this.modeChanged = new EventEmitter();\n      this.openedChanged = new EventEmitter();\n      this.positionChanged = new EventEmitter();\n      this._animationsEnabled = false;\n      this._hovered = false;\n\n      this._handleOverlayClick = () => {\n        this.close();\n      };\n    } // -----------------------------------------------------------------------------------------------------\n    // @ Accessors\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Host binding for component classes\n     */\n\n\n    get classList() {\n      /* eslint-disable @typescript-eslint/naming-convention */\n      return {\n        'fuse-drawer-animations-enabled': this._animationsEnabled,\n        'fuse-drawer-fixed': this.fixed,\n        'fuse-drawer-hover': this._hovered,\n        [`fuse-drawer-mode-${this.mode}`]: true,\n        'fuse-drawer-opened': this.opened,\n        [`fuse-drawer-position-${this.position}`]: true\n      };\n      /* eslint-enable @typescript-eslint/naming-convention */\n    }\n    /**\n     * Host binding for component inline styles\n     */\n\n\n    get styleList() {\n      return {\n        'visibility': this.opened ? 'visible' : 'hidden'\n      };\n    } // -----------------------------------------------------------------------------------------------------\n    // @ Decorated methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On mouseenter\n     *\n     * @private\n     */\n\n\n    _onMouseenter() {\n      // Enable the animations\n      this._enableAnimations(); // Set the hovered\n\n\n      this._hovered = true;\n    }\n    /**\n     * On mouseleave\n     *\n     * @private\n     */\n\n\n    _onMouseleave() {\n      // Enable the animations\n      this._enableAnimations(); // Set the hovered\n\n\n      this._hovered = false;\n    } // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On changes\n     *\n     * @param changes\n     */\n\n\n    ngOnChanges(changes) {\n      // Fixed\n      if ('fixed' in changes) {\n        // Coerce the value to a boolean\n        this.fixed = coerceBooleanProperty(changes.fixed.currentValue); // Execute the observable\n\n        this.fixedChanged.next(this.fixed);\n      } // Mode\n\n\n      if ('mode' in changes) {\n        // Get the previous and current values\n        const previousMode = changes.mode.previousValue;\n        const currentMode = changes.mode.currentValue; // Disable the animations\n\n        this._disableAnimations(); // If the mode changes: 'over -> side'\n\n\n        if (previousMode === 'over' && currentMode === 'side') {\n          // Hide the overlay\n          this._hideOverlay();\n        } // If the mode changes: 'side -> over'\n\n\n        if (previousMode === 'side' && currentMode === 'over') {\n          // If the drawer is opened\n          if (this.opened) {\n            // Show the overlay\n            this._showOverlay();\n          }\n        } // Execute the observable\n\n\n        this.modeChanged.next(currentMode); // Enable the animations after a delay\n        // The delay must be bigger than the current transition-duration\n        // to make sure nothing will be animated while the mode is changing\n\n        setTimeout(() => {\n          this._enableAnimations();\n        }, 500);\n      } // Opened\n\n\n      if ('opened' in changes) {\n        // Coerce the value to a boolean\n        const open = coerceBooleanProperty(changes.opened.currentValue); // Open/close the drawer\n\n        this._toggleOpened(open);\n      } // Position\n\n\n      if ('position' in changes) {\n        // Execute the observable\n        this.positionChanged.next(this.position);\n      } // Transparent overlay\n\n\n      if ('transparentOverlay' in changes) {\n        // Coerce the value to a boolean\n        this.transparentOverlay = coerceBooleanProperty(changes.transparentOverlay.currentValue);\n      }\n    }\n    /**\n     * On init\n     */\n\n\n    ngOnInit() {\n      // Register the drawer\n      this._fuseDrawerService.registerComponent(this.name, this);\n    }\n    /**\n     * On destroy\n     */\n\n\n    ngOnDestroy() {\n      // Finish the animation\n      if (this._player) {\n        this._player.finish();\n      } // Deregister the drawer from the registry\n\n\n      this._fuseDrawerService.deregisterComponent(this.name);\n    } // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Open the drawer\n     */\n\n\n    open() {\n      // Return if the drawer has already opened\n      if (this.opened) {\n        return;\n      } // Open the drawer\n\n\n      this._toggleOpened(true);\n    }\n    /**\n     * Close the drawer\n     */\n\n\n    close() {\n      // Return if the drawer has already closed\n      if (!this.opened) {\n        return;\n      } // Close the drawer\n\n\n      this._toggleOpened(false);\n    }\n    /**\n     * Toggle the drawer\n     */\n\n\n    toggle() {\n      if (this.opened) {\n        this.close();\n      } else {\n        this.open();\n      }\n    } // -----------------------------------------------------------------------------------------------------\n    // @ Private methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Enable the animations\n     *\n     * @private\n     */\n\n\n    _enableAnimations() {\n      // Return if the animations are already enabled\n      if (this._animationsEnabled) {\n        return;\n      } // Enable the animations\n\n\n      this._animationsEnabled = true;\n    }\n    /**\n     * Disable the animations\n     *\n     * @private\n     */\n\n\n    _disableAnimations() {\n      // Return if the animations are already disabled\n      if (!this._animationsEnabled) {\n        return;\n      } // Disable the animations\n\n\n      this._animationsEnabled = false;\n    }\n    /**\n     * Show the backdrop\n     *\n     * @private\n     */\n\n\n    _showOverlay() {\n      // Create the backdrop element\n      this._overlay = this._renderer2.createElement('div'); // Add a class to the backdrop element\n\n      this._overlay.classList.add('fuse-drawer-overlay'); // Add a class depending on the fixed option\n\n\n      if (this.fixed) {\n        this._overlay.classList.add('fuse-drawer-overlay-fixed');\n      } // Add a class depending on the transparentOverlay option\n\n\n      if (this.transparentOverlay) {\n        this._overlay.classList.add('fuse-drawer-overlay-transparent');\n      } // Append the backdrop to the parent of the drawer\n\n\n      this._renderer2.appendChild(this._elementRef.nativeElement.parentElement, this._overlay); // Create enter animation and attach it to the player\n\n\n      this._player = this._animationBuilder.build([style({\n        opacity: 0\n      }), animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({\n        opacity: 1\n      }))]).create(this._overlay); // Play the animation\n\n      this._player.play(); // Add an event listener to the overlay\n\n\n      this._overlay.addEventListener('click', this._handleOverlayClick);\n    }\n    /**\n     * Hide the backdrop\n     *\n     * @private\n     */\n\n\n    _hideOverlay() {\n      if (!this._overlay) {\n        return;\n      } // Create the leave animation and attach it to the player\n\n\n      this._player = this._animationBuilder.build([animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({\n        opacity: 0\n      }))]).create(this._overlay); // Play the animation\n\n      this._player.play(); // Once the animation is done...\n\n\n      this._player.onDone(() => {\n        // If the overlay still exists...\n        if (this._overlay) {\n          // Remove the event listener\n          this._overlay.removeEventListener('click', this._handleOverlayClick); // Remove the overlay\n\n\n          this._overlay.parentNode.removeChild(this._overlay);\n\n          this._overlay = null;\n        }\n      });\n    }\n    /**\n     * Open/close the drawer\n     *\n     * @param open\n     * @private\n     */\n\n\n    _toggleOpened(open) {\n      // Set the opened\n      this.opened = open; // Enable the animations\n\n      this._enableAnimations(); // If the mode is 'over'\n\n\n      if (this.mode === 'over') {\n        // If the drawer opens, show the overlay\n        if (open) {\n          this._showOverlay();\n        } // Otherwise, close the overlay\n        else {\n          this._hideOverlay();\n        }\n      } // Execute the observable\n\n\n      this.openedChanged.next(open);\n    }\n\n  }\n\n  FuseDrawerComponent.ɵfac = function FuseDrawerComponent_Factory(t) {\n    return new (t || FuseDrawerComponent)(i0.ɵɵdirectiveInject(i1.AnimationBuilder), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i2.FuseDrawerService), i0.ɵɵdirectiveInject(i3.FuseUtilsService));\n  };\n\n  FuseDrawerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FuseDrawerComponent,\n    selectors: [[\"fuse-drawer\"]],\n    hostVars: 4,\n    hostBindings: function FuseDrawerComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"mouseenter\", function FuseDrawerComponent_mouseenter_HostBindingHandler() {\n          return ctx._onMouseenter();\n        })(\"mouseleave\", function FuseDrawerComponent_mouseleave_HostBindingHandler() {\n          return ctx._onMouseleave();\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵstyleMap(ctx.styleList);\n        i0.ɵɵclassMap(ctx.classList);\n      }\n    },\n    inputs: {\n      fixed: \"fixed\",\n      mode: \"mode\",\n      name: \"name\",\n      opened: \"opened\",\n      position: \"position\",\n      transparentOverlay: \"transparentOverlay\"\n    },\n    outputs: {\n      fixedChanged: \"fixedChanged\",\n      modeChanged: \"modeChanged\",\n      openedChanged: \"openedChanged\",\n      positionChanged: \"positionChanged\"\n    },\n    exportAs: [\"fuseDrawer\"],\n    features: [i0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 0,\n    consts: [[1, \"fuse-drawer-content\"]],\n    template: function FuseDrawerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵprojection(1);\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\":root{--fuse-drawer-width: 320px}fuse-drawer{position:relative;display:flex;flex-direction:column;flex:1 1 auto;width:var(--fuse-drawer-width);min-width:var(--fuse-drawer-width);max-width:var(--fuse-drawer-width);z-index:300;box-shadow:0 2px 8px #00000059;--tw-bg-opacity: 1;background-color:rgba(var(--fuse-bg-card-rgb),var(--tw-bg-opacity))}fuse-drawer.fuse-drawer-animations-enabled{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:visibility,margin-left,margin-right,transform,width,max-width,min-width}fuse-drawer.fuse-drawer-animations-enabled .fuse-drawer-content{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:width,max-width,min-width}fuse-drawer.fuse-drawer-mode-over{position:absolute;top:0;bottom:0}fuse-drawer.fuse-drawer-mode-over.fuse-drawer-fixed{position:fixed}fuse-drawer.fuse-drawer-position-left.fuse-drawer-mode-side{margin-left:calc(var(--fuse-drawer-width) * -1)}fuse-drawer.fuse-drawer-position-left.fuse-drawer-mode-side.fuse-drawer-opened{margin-left:0}fuse-drawer.fuse-drawer-position-left.fuse-drawer-mode-over{left:0;transform:translate3d(-100%,0,0)}fuse-drawer.fuse-drawer-position-left.fuse-drawer-mode-over.fuse-drawer-opened{transform:translateZ(0)}fuse-drawer.fuse-drawer-position-left .fuse-drawer-content{left:0}fuse-drawer.fuse-drawer-position-right.fuse-drawer-mode-side{margin-right:calc(var(--fuse-drawer-width) * -1)}fuse-drawer.fuse-drawer-position-right.fuse-drawer-mode-side.fuse-drawer-opened{margin-right:0}fuse-drawer.fuse-drawer-position-right.fuse-drawer-mode-over{right:0;transform:translate3d(100%,0,0)}fuse-drawer.fuse-drawer-position-right.fuse-drawer-mode-over.fuse-drawer-opened{transform:translateZ(0)}fuse-drawer.fuse-drawer-position-right .fuse-drawer-content{right:0}fuse-drawer .fuse-drawer-content{position:absolute;display:flex;flex:1 1 auto;top:0;bottom:0;width:100%;height:100%;overflow:hidden;--tw-bg-opacity: 1;background-color:rgba(var(--fuse-bg-card-rgb),var(--tw-bg-opacity))}.fuse-drawer-overlay{position:absolute;top:0;bottom:0;left:0;right:0;z-index:299;opacity:1;background-color:#0009}.fuse-drawer-overlay.fuse-drawer-overlay-fixed{position:fixed}.fuse-drawer-overlay.fuse-drawer-overlay-transparent{background-color:transparent}\\n\"],\n    encapsulation: 2\n  });\n  return FuseDrawerComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}