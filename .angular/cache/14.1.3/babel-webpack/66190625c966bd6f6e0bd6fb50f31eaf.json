{"ast":null,"code":"import { assign, cloneDeep } from 'lodash-es';\nimport { FuseMockApiUtils } from '@fuse/lib/mock-api';\nimport { notifications as notificationsData } from 'app/mock-api/common/notifications/data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/lib/mock-api\";\nexport let NotificationsMockApi = /*#__PURE__*/(() => {\n  class NotificationsMockApi {\n    /**\n     * Constructor\n     */\n    constructor(_fuseMockApiService) {\n      this._fuseMockApiService = _fuseMockApiService;\n      this._notifications = notificationsData; // Register Mock API handlers\n\n      this.registerHandlers();\n    } // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Register Mock API handlers\n     */\n\n\n    registerHandlers() {\n      // -----------------------------------------------------------------------------------------------------\n      // @ Notifications - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/common/notifications').reply(() => [200, cloneDeep(this._notifications)]); // -----------------------------------------------------------------------------------------------------\n      // @ Notifications - POST\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onPost('api/common/notifications').reply(({\n        request\n      }) => {\n        // Get the notification\n        const newNotification = cloneDeep(request.body.notification); // Generate a new GUID\n\n        newNotification.id = FuseMockApiUtils.guid(); // Unshift the new notification\n\n        this._notifications.unshift(newNotification); // Return the response\n\n\n        return [200, newNotification];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ Notifications - PATCH\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onPatch('api/common/notifications').reply(({\n        request\n      }) => {\n        // Get the id and notification\n        const id = request.body.id;\n        const notification = cloneDeep(request.body.notification); // Prepare the updated notification\n\n        let updatedNotification = null; // Find the notification and update it\n\n        this._notifications.forEach((item, index, notifications) => {\n          if (item.id === id) {\n            // Update the notification\n            notifications[index] = assign({}, notifications[index], notification); // Store the updated notification\n\n            updatedNotification = notifications[index];\n          }\n        }); // Return the response\n\n\n        return [200, updatedNotification];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ Notifications - DELETE\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onDelete('api/common/notifications').reply(({\n        request\n      }) => {\n        // Get the id\n        const id = request.params.get('id'); // Prepare the deleted notification\n\n        let deletedNotification = null; // Find the notification\n\n        const index = this._notifications.findIndex(item => item.id === id); // Store the deleted notification\n\n\n        deletedNotification = cloneDeep(this._notifications[index]); // Delete the notification\n\n        this._notifications.splice(index, 1); // Return the response\n\n\n        return [200, deletedNotification];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ Mark all as read - GET\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onGet('api/common/notifications/mark-all-as-read').reply(() => {\n        // Go through all notifications\n        this._notifications.forEach((item, index, notifications) => {\n          // Mark it as read\n          notifications[index].read = true;\n          notifications[index].seen = true;\n        }); // Return the response\n\n\n        return [200, true];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ Toggle read status - POST\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onPost('api/common/notifications/toggle-read-status').reply(({\n        request\n      }) => {\n        // Get the notification\n        const notification = cloneDeep(request.body.notification); // Prepare the updated notification\n\n        let updatedNotification = null; // Find the notification and update it\n\n        this._notifications.forEach((item, index, notifications) => {\n          if (item.id === notification.id) {\n            // Update the notification\n            notifications[index].read = notification.read; // Store the updated notification\n\n            updatedNotification = notifications[index];\n          }\n        }); // Return the response\n\n\n        return [200, updatedNotification];\n      });\n    }\n\n  }\n\n  NotificationsMockApi.ɵfac = function NotificationsMockApi_Factory(t) {\n    return new (t || NotificationsMockApi)(i0.ɵɵinject(i1.FuseMockApiService));\n  };\n\n  NotificationsMockApi.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NotificationsMockApi,\n    factory: NotificationsMockApi.ɵfac,\n    providedIn: 'root'\n  });\n  return NotificationsMockApi;\n})();","map":null,"metadata":{},"sourceType":"module"}