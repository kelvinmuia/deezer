{"ast":null,"code":"import { cloneDeep } from 'lodash-es';\nimport { faqCategories as faqCategoriesData, faqs as faqsData, guideCategories as guideCategoriesData, guideContent as guideContentData, guides as guidesData } from 'app/mock-api/apps/help-center/data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/lib/mock-api\";\nexport let HelpCenterMockApi = /*#__PURE__*/(() => {\n  class HelpCenterMockApi {\n    /**\n     * Constructor\n     */\n    constructor(_fuseMockApiService) {\n      this._fuseMockApiService = _fuseMockApiService;\n      this._faqCategories = faqCategoriesData;\n      this._faqs = faqsData;\n      this._guideCategories = guideCategoriesData;\n      this._guides = guidesData;\n      this._guideContent = guideContentData; // Register Mock API handlers\n\n      this.registerHandlers();\n    } // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Register Mock API handlers\n     */\n\n\n    registerHandlers() {\n      // -----------------------------------------------------------------------------------------------------\n      // @ FAQs - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/apps/help-center/faqs').reply(({\n        request\n      }) => {\n        // Get the category slug\n        const slug = request.params.get('slug'); // Prepare the results\n\n        const results = []; // Get FAQs\n\n        const faqs = cloneDeep(this._faqs); // Get FAQ Categories\n\n        const categories = cloneDeep(this._faqCategories); // If slug is not provided...\n\n        if (!slug) {\n          // Go through each category and set the results\n          categories.forEach(category => {\n            results.push({ ...category,\n              faqs: faqs.filter(faq => faq.categoryId === category.id)\n            });\n          });\n        } // Otherwise...\n        else {\n          // Find the category by the slug\n          const category = categories.find(item => item.slug === slug); // Set the results\n\n          results.push({ ...category,\n            faqs: faqs.filter(faq => faq.categoryId === category.id)\n          });\n        } // Return the response\n\n\n        return [200, results];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ Guides - GET\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onGet('api/apps/help-center/guides').reply(({\n        request\n      }) => {\n        // Get the slug & limit\n        const slug = request.params.get('slug');\n        const limit = request.params.get('limit'); // Prepare the results\n\n        const results = []; // Get all Guides\n\n        const guides = cloneDeep(this._guides); // Get Guide categories\n\n        const categories = cloneDeep(this._guideCategories); // If slug is not provided...\n\n        if (!slug) {\n          // Parse the limit as an integer\n          const limitNum = parseInt(limit ?? '5', 10); // Go through each category and set the results\n\n          categories.forEach(category => {\n            results.push({ ...category,\n              visibleGuides: limitNum,\n              totalGuides: guides.filter(guide => guide.categoryId === category.id).length,\n              guides: guides.filter(guide => guide.categoryId === category.id).slice(0, limitNum)\n            });\n          });\n        } // Otherwise...\n        else {\n          // Find the category by the slug\n          const category = categories.find(item => item.slug === slug); // Set the results\n\n          results.push({ ...category,\n            guides: guides.filter(guide => guide.categoryId === category.id)\n          });\n        } // Return the response\n\n\n        return [200, results];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ Guide - GET\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onGet('api/apps/help-center/guide').reply(({\n        request\n      }) => {\n        // Get the slugs\n        const categorySlug = request.params.get('categorySlug');\n        const guideSlug = request.params.get('guideSlug'); // Get all Guides and Guide Categories\n\n        const guides = cloneDeep(this._guides);\n        const categories = cloneDeep(this._guideCategories); // Prepare the result\n\n        const result = { ...categories.find(category => category.slug === categorySlug),\n          guides: [guides.find(guide => guide.slug === guideSlug)]\n        }; // Add the content to the guide\n\n        result.guides[0]['content'] = this._guideContent; // Return the response\n\n        return [200, result];\n      });\n    }\n\n  }\n\n  HelpCenterMockApi.ɵfac = function HelpCenterMockApi_Factory(t) {\n    return new (t || HelpCenterMockApi)(i0.ɵɵinject(i1.FuseMockApiService));\n  };\n\n  HelpCenterMockApi.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HelpCenterMockApi,\n    factory: HelpCenterMockApi.ɵfac,\n    providedIn: 'root'\n  });\n  return HelpCenterMockApi;\n})();","map":null,"metadata":{},"sourceType":"module"}