{"ast":null,"code":"import { SimpleChanges } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject, takeUntil } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/services/loading\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/material/progress-bar\";\n\nfunction FuseLoadingBarComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"mat-progress-bar\", 1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"mode\", ctx_r0.mode)(\"value\", ctx_r0.progress);\n  }\n}\n\nexport let FuseLoadingBarComponent = /*#__PURE__*/(() => {\n  class FuseLoadingBarComponent {\n    /**\n     * Constructor\n     */\n    constructor(_fuseLoadingService) {\n      this._fuseLoadingService = _fuseLoadingService;\n      this.autoMode = true;\n      this.progress = 0;\n      this.show = false;\n      this._unsubscribeAll = new Subject();\n    } // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On changes\n     *\n     * @param changes\n     */\n\n\n    ngOnChanges(changes) {\n      // Auto mode\n      if ('autoMode' in changes) {\n        // Set the auto mode in the service\n        this._fuseLoadingService.setAutoMode(coerceBooleanProperty(changes.autoMode.currentValue));\n      }\n    }\n    /**\n     * On init\n     */\n\n\n    ngOnInit() {\n      // Subscribe to the service\n      this._fuseLoadingService.mode$.pipe(takeUntil(this._unsubscribeAll)).subscribe(value => {\n        this.mode = value;\n      });\n\n      this._fuseLoadingService.progress$.pipe(takeUntil(this._unsubscribeAll)).subscribe(value => {\n        this.progress = value;\n      });\n\n      this._fuseLoadingService.show$.pipe(takeUntil(this._unsubscribeAll)).subscribe(value => {\n        this.show = value;\n      });\n    }\n    /**\n     * On destroy\n     */\n\n\n    ngOnDestroy() {\n      // Unsubscribe from all subscriptions\n      this._unsubscribeAll.next(null);\n\n      this._unsubscribeAll.complete();\n    }\n\n  }\n\n  FuseLoadingBarComponent.ɵfac = function FuseLoadingBarComponent_Factory(t) {\n    return new (t || FuseLoadingBarComponent)(i0.ɵɵdirectiveInject(i1.FuseLoadingService));\n  };\n\n  FuseLoadingBarComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FuseLoadingBarComponent,\n    selectors: [[\"fuse-loading-bar\"]],\n    inputs: {\n      autoMode: \"autoMode\"\n    },\n    exportAs: [\"fuseLoadingBar\"],\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[4, \"ngIf\"], [3, \"mode\", \"value\"]],\n    template: function FuseLoadingBarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, FuseLoadingBarComponent_ng_container_0_Template, 2, 2, \"ng-container\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.show);\n      }\n    },\n    dependencies: [i2.NgIf, i3.MatProgressBar],\n    styles: [\"fuse-loading-bar{position:fixed;top:0;z-index:999;width:100%;height:6px}\\n\"],\n    encapsulation: 2\n  });\n  return FuseLoadingBarComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}