{"ast":null,"code":"import { HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { finalize } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/services/loading/loading.service\";\nexport let FuseLoadingInterceptor = /*#__PURE__*/(() => {\n  class FuseLoadingInterceptor {\n    /**\n     * Constructor\n     */\n    constructor(_fuseLoadingService) {\n      this._fuseLoadingService = _fuseLoadingService; // Subscribe to the auto\n\n      this._fuseLoadingService.auto$.subscribe(value => {\n        this.handleRequestsAutomatically = value;\n      });\n    }\n    /**\n     * Intercept\n     *\n     * @param req\n     * @param next\n     */\n\n\n    intercept(req, next) {\n      // If the Auto mode is turned off, do nothing\n      if (!this.handleRequestsAutomatically) {\n        return next.handle(req);\n      } // Set the loading status to true\n\n\n      this._fuseLoadingService._setLoadingStatus(true, req.url);\n\n      return next.handle(req).pipe(finalize(() => {\n        // Set the status to false if there are any errors or the request is completed\n        this._fuseLoadingService._setLoadingStatus(false, req.url);\n      }));\n    }\n\n  }\n\n  FuseLoadingInterceptor.ɵfac = function FuseLoadingInterceptor_Factory(t) {\n    return new (t || FuseLoadingInterceptor)(i0.ɵɵinject(i1.FuseLoadingService));\n  };\n\n  FuseLoadingInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FuseLoadingInterceptor,\n    factory: FuseLoadingInterceptor.ɵfac\n  });\n  return FuseLoadingInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}