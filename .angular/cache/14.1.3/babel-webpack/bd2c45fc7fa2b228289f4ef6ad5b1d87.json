{"ast":null,"code":"import { map, ReplaySubject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    /**\n     * Constructor\n     */\n    constructor(_httpClient) {\n      this._httpClient = _httpClient;\n      this._user = new ReplaySubject(1);\n    } // -----------------------------------------------------------------------------------------------------\n    // @ Accessors\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Setter & getter for user\n     *\n     * @param value\n     */\n\n\n    set user(value) {\n      // Store the value\n      this._user.next(value);\n    }\n\n    get user$() {\n      return this._user.asObservable();\n    } // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Get the current logged in user data\n     */\n\n\n    get() {\n      return this._httpClient.get('api/common/user').pipe(tap(user => {\n        this._user.next(user);\n      }));\n    }\n    /**\n     * Update the user\n     *\n     * @param user\n     */\n\n\n    update(user) {\n      return this._httpClient.patch('api/common/user', {\n        user\n      }).pipe(map(response => {\n        this._user.next(response);\n      }));\n    }\n\n  }\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}