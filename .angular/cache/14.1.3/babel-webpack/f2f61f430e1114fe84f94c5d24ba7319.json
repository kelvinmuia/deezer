{"ast":null,"code":"import { from, map } from 'rxjs';\nimport { assign, cloneDeep } from 'lodash-es';\nimport { FuseMockApiUtils } from '@fuse/lib/mock-api';\nimport { contacts as contactsData, countries as countriesData, tags as tagsData } from 'app/mock-api/apps/contacts/data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/lib/mock-api\";\nexport let ContactsMockApi = /*#__PURE__*/(() => {\n  class ContactsMockApi {\n    /**\n     * Constructor\n     */\n    constructor(_fuseMockApiService) {\n      this._fuseMockApiService = _fuseMockApiService;\n      this._contacts = contactsData;\n      this._countries = countriesData;\n      this._tags = tagsData; // Register Mock API handlers\n\n      this.registerHandlers();\n    } // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Register Mock API handlers\n     */\n\n\n    registerHandlers() {\n      // -----------------------------------------------------------------------------------------------------\n      // @ Contacts - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/apps/contacts/all').reply(() => {\n        // Clone the contacts\n        const contacts = cloneDeep(this._contacts); // Sort the contacts by the name field by default\n\n        contacts.sort((a, b) => a.name.localeCompare(b.name)); // Return the response\n\n        return [200, contacts];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ Contacts Search - GET\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onGet('api/apps/contacts/search').reply(({\n        request\n      }) => {\n        // Get the search query\n        const query = request.params.get('query'); // Clone the contacts\n\n        let contacts = cloneDeep(this._contacts); // If the query exists...\n\n        if (query) {\n          // Filter the contacts\n          contacts = contacts.filter(contact => contact.name && contact.name.toLowerCase().includes(query.toLowerCase()));\n        } // Sort the contacts by the name field by default\n\n\n        contacts.sort((a, b) => a.name.localeCompare(b.name)); // Return the response\n\n        return [200, contacts];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ Contact - GET\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onGet('api/apps/contacts/contact').reply(({\n        request\n      }) => {\n        // Get the id from the params\n        const id = request.params.get('id'); // Clone the contacts\n\n        const contacts = cloneDeep(this._contacts); // Find the contact\n\n        const contact = contacts.find(item => item.id === id); // Return the response\n\n        return [200, contact];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ Contact - POST\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onPost('api/apps/contacts/contact').reply(() => {\n        // Generate a new contact\n        const newContact = {\n          id: FuseMockApiUtils.guid(),\n          avatar: null,\n          name: 'New Contact',\n          emails: [],\n          phoneNumbers: [],\n          job: {\n            title: '',\n            company: ''\n          },\n          birthday: null,\n          address: null,\n          notes: null,\n          tags: []\n        }; // Unshift the new contact\n\n        this._contacts.unshift(newContact); // Return the response\n\n\n        return [200, newContact];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ Contact - PATCH\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onPatch('api/apps/contacts/contact').reply(({\n        request\n      }) => {\n        // Get the id and contact\n        const id = request.body.id;\n        const contact = cloneDeep(request.body.contact); // Prepare the updated contact\n\n        let updatedContact = null; // Find the contact and update it\n\n        this._contacts.forEach((item, index, contacts) => {\n          if (item.id === id) {\n            // Update the contact\n            contacts[index] = assign({}, contacts[index], contact); // Store the updated contact\n\n            updatedContact = contacts[index];\n          }\n        }); // Return the response\n\n\n        return [200, updatedContact];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ Contact - DELETE\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onDelete('api/apps/contacts/contact').reply(({\n        request\n      }) => {\n        // Get the id\n        const id = request.params.get('id'); // Find the contact and delete it\n\n        this._contacts.forEach((item, index) => {\n          if (item.id === id) {\n            this._contacts.splice(index, 1);\n          }\n        }); // Return the response\n\n\n        return [200, true];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ Countries - GET\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onGet('api/apps/contacts/countries').reply(() => [200, cloneDeep(this._countries)]); // -----------------------------------------------------------------------------------------------------\n      // @ Tags - GET\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onGet('api/apps/contacts/tags').reply(() => [200, cloneDeep(this._tags)]); // -----------------------------------------------------------------------------------------------------\n      // @ Tags - POST\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onPost('api/apps/contacts/tag').reply(({\n        request\n      }) => {\n        // Get the tag\n        const newTag = cloneDeep(request.body.tag); // Generate a new GUID\n\n        newTag.id = FuseMockApiUtils.guid(); // Unshift the new tag\n\n        this._tags.unshift(newTag); // Return the response\n\n\n        return [200, newTag];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ Tags - PATCH\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onPatch('api/apps/contacts/tag').reply(({\n        request\n      }) => {\n        // Get the id and tag\n        const id = request.body.id;\n        const tag = cloneDeep(request.body.tag); // Prepare the updated tag\n\n        let updatedTag = null; // Find the tag and update it\n\n        this._tags.forEach((item, index, tags) => {\n          if (item.id === id) {\n            // Update the tag\n            tags[index] = assign({}, tags[index], tag); // Store the updated tag\n\n            updatedTag = tags[index];\n          }\n        }); // Return the response\n\n\n        return [200, updatedTag];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ Tag - DELETE\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onDelete('api/apps/contacts/tag').reply(({\n        request\n      }) => {\n        // Get the id\n        const id = request.params.get('id'); // Find the tag and delete it\n\n        this._tags.forEach((item, index) => {\n          if (item.id === id) {\n            this._tags.splice(index, 1);\n          }\n        }); // Get the contacts that have the tag\n\n\n        const contactsWithTag = this._contacts.filter(contact => contact.tags.indexOf(id) > -1); // Iterate through them and delete the tag\n\n\n        contactsWithTag.forEach(contact => {\n          contact.tags.splice(contact.tags.indexOf(id), 1);\n        }); // Return the response\n\n        return [200, true];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ Avatar - POST\n      // -----------------------------------------------------------------------------------------------------\n\n      /**\n       * Read the given file as mock-api url\n       *\n       * @param file\n       */\n\n\n      const readAsDataURL = file => // Return a new promise\n      new Promise((resolve, reject) => {\n        // Create a new reader\n        const reader = new FileReader(); // Resolve the promise on success\n\n        reader.onload = () => {\n          resolve(reader.result);\n        }; // Reject the promise on error\n\n\n        reader.onerror = e => {\n          reject(e);\n        }; // Read the file as the\n\n\n        reader.readAsDataURL(file);\n      });\n\n      this._fuseMockApiService.onPost('api/apps/contacts/avatar').reply(({\n        request\n      }) => {\n        // Get the id and avatar\n        const id = request.body.id;\n        const avatar = request.body.avatar; // Prepare the updated contact\n\n        let updatedContact = null; // In a real world application, this would return the path\n        // of the saved image file (from host, S3 bucket, etc.) but,\n        // for the sake of the demo, we encode the image to base64\n        // and return it as the new path of the uploaded image since\n        // the src attribute of the img tag works with both image urls\n        // and encoded images.\n\n        return from(readAsDataURL(avatar)).pipe(map(path => {\n          // Find the contact and update it\n          this._contacts.forEach((item, index, contacts) => {\n            if (item.id === id) {\n              // Update the avatar\n              contacts[index].avatar = path; // Store the updated contact\n\n              updatedContact = contacts[index];\n            }\n          }); // Return the response\n\n\n          return [200, updatedContact];\n        }));\n      });\n    }\n\n  }\n\n  ContactsMockApi.ɵfac = function ContactsMockApi_Factory(t) {\n    return new (t || ContactsMockApi)(i0.ɵɵinject(i1.FuseMockApiService));\n  };\n\n  ContactsMockApi.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ContactsMockApi,\n    factory: ContactsMockApi.ɵfac,\n    providedIn: 'root'\n  });\n  return ContactsMockApi;\n})();","map":null,"metadata":{},"sourceType":"module"}