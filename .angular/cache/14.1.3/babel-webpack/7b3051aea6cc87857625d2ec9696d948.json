{"ast":null,"code":"/**\n * @license Angular v14.1.3\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\nimport { Location, LocationStrategy } from '@angular/common';\nimport { SpyLocation, MockLocationStrategy } from '@angular/common/testing';\nimport * as i0 from '@angular/core';\nimport { Compiler, Injector, Optional, NgModule } from '@angular/core';\nimport { Router, ɵflatten, ɵassignExtraOptionsToRouter, provideRoutes, ROUTER_CONFIGURATION, RouterModule, ɵROUTER_PROVIDERS, UrlSerializer, ChildrenOutletContexts, ROUTES, TitleStrategy, UrlHandlingStrategy, RouteReuseStrategy, ɵprovidePreloading, NoPreloading } from '@angular/router';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file exists to easily patch the SpyNgModuleFactoryLoader into g3\n\nconst EXTRA_ROUTER_TESTING_PROVIDERS = [];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nfunction isUrlHandlingStrategy(opts) {\n  // This property check is needed because UrlHandlingStrategy is an interface and doesn't exist at\n  // runtime.\n  return 'shouldProcessUrl' in opts;\n}\n/**\n * Router setup factory function used for testing. Only used internally to keep the factory that's\n * marked as publicApi cleaner (i.e. not having _both_ `TitleStrategy` and `DefaultTitleStrategy`).\n */\n\n\nfunction setupTestingRouterInternal(urlSerializer, contexts, location, compiler, injector, routes, titleStrategy, opts, urlHandlingStrategy, routeReuseStrategy) {\n  return setupTestingRouter(urlSerializer, contexts, location, compiler, injector, routes, opts, urlHandlingStrategy, routeReuseStrategy, titleStrategy);\n}\n/**\n * Router setup factory function used for testing.\n *\n * @publicApi\n */\n\n\nfunction setupTestingRouter(urlSerializer, contexts, location, compiler, injector, routes, opts, urlHandlingStrategy, routeReuseStrategy, titleStrategy) {\n  const router = new Router(null, urlSerializer, contexts, location, injector, compiler, ɵflatten(routes));\n\n  if (opts) {\n    // Handle deprecated argument ordering.\n    if (isUrlHandlingStrategy(opts)) {\n      router.urlHandlingStrategy = opts;\n    } else {\n      // Handle ExtraOptions\n      ɵassignExtraOptionsToRouter(opts, router);\n    }\n  }\n\n  if (urlHandlingStrategy) {\n    router.urlHandlingStrategy = urlHandlingStrategy;\n  }\n\n  if (routeReuseStrategy) {\n    router.routeReuseStrategy = routeReuseStrategy;\n  }\n\n  router.titleStrategy = titleStrategy;\n  return router;\n}\n/**\n * @description\n *\n * Sets up the router to be used for testing.\n *\n * The modules sets up the router to be used for testing.\n * It provides spy implementations of `Location` and `LocationStrategy`.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * beforeEach(() => {\n *   TestBed.configureTestingModule({\n *     imports: [\n *       RouterTestingModule.withRoutes(\n *         [{path: '', component: BlankCmp}, {path: 'simple', component: SimpleCmp}]\n *       )\n *     ]\n *   });\n * });\n * ```\n *\n * @publicApi\n */\n\n\nlet RouterTestingModule = /*#__PURE__*/(() => {\n  class RouterTestingModule {\n    static withRoutes(routes, config) {\n      return {\n        ngModule: RouterTestingModule,\n        providers: [provideRoutes(routes), {\n          provide: ROUTER_CONFIGURATION,\n          useValue: config ? config : {}\n        }]\n      };\n    }\n\n  }\n\n  RouterTestingModule.ɵfac = function RouterTestingModule_Factory(t) {\n    return new (t || RouterTestingModule)();\n  };\n\n  RouterTestingModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: RouterTestingModule\n  });\n  RouterTestingModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [ɵROUTER_PROVIDERS, EXTRA_ROUTER_TESTING_PROVIDERS, {\n      provide: Location,\n      useClass: SpyLocation\n    }, {\n      provide: LocationStrategy,\n      useClass: MockLocationStrategy\n    }, {\n      provide: Router,\n      useFactory: setupTestingRouterInternal,\n      deps: [UrlSerializer, ChildrenOutletContexts, Location, Compiler, Injector, ROUTES, TitleStrategy, ROUTER_CONFIGURATION, [UrlHandlingStrategy, new Optional()], [RouteReuseStrategy, new Optional()]]\n    }, ɵprovidePreloading(NoPreloading), provideRoutes([])],\n    imports: [RouterModule]\n  });\n  return RouterTestingModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file exists for easily patching SpyNgModuleFactoryLoader in g3\n\n\nvar spy_ng_module_factory_loader = {};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RouterTestingModule, setupTestingRouter, setupTestingRouterInternal }; //# sourceMappingURL=testing.mjs.map","map":null,"metadata":{},"sourceType":"module"}