{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, map, Observable, of, switchMap, take, tap, throwError } from 'rxjs';\nimport { environment } from 'environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ArtistService = /*#__PURE__*/(() => {\n  class ArtistService {\n    /**\n     * Constructor\n     */\n    constructor(_httpClient) {\n      this._httpClient = _httpClient; // Private\n\n      this._artist = new BehaviorSubject(null);\n      this._artists = new BehaviorSubject(null);\n      this._artistTracks = new BehaviorSubject(null); // Set the private defaults\n\n      this._artist = new BehaviorSubject(null);\n      this._artists = new BehaviorSubject(null);\n      this._artistTracks = new BehaviorSubject(null);\n    } // -----------------------------------------------------------------------------------------------------\n    // @ Accessors\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Getter for Artist\n     */\n\n\n    get artist$() {\n      return this._artist.asObservable();\n    }\n    /**\n     * Getter for Artists\n     */\n\n\n    get artists$() {\n      return this._artists.asObservable();\n    }\n    /**\n    * Getter for Artists Tracks\n    */\n\n\n    get artistTracks$() {\n      return this._artistTracks.asObservable();\n    } // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n      * Search Artist\n      */\n\n\n    searchArtist(query) {\n      return this._httpClient.get(environment.corsUrl + environment.url + \"/search/artist?q=\" + query).pipe(tap(response => {\n        this._artists.next(response.data);\n      }));\n    }\n    /**\n     * Get artist by id\n     */\n\n\n    getArtistById(id) {\n      return this._artists.pipe(take(1), map(artists => {\n        // Find the artist\n        const artist = artists.find(item => item.id === id) || null; // Update the artist\n\n        this._artist.next(artist); // Return the artist\n\n\n        return artist;\n      }), switchMap(artist => {\n        if (!artist) {\n          return throwError('Could not found artist with id of ' + id + '!');\n        }\n\n        return of(artist);\n      }));\n    }\n    /**\n    * Get artist top 5 tracks\n    */\n\n\n    getArtistTop5TracksById(id) {\n      return this._httpClient.get(environment.corsUrl + environment.url + '/artist/' + id + '/top').pipe(tap(response => {\n        this._artistTracks.next(response.data);\n      }));\n    }\n\n  }\n\n  ArtistService.ɵfac = function ArtistService_Factory(t) {\n    return new (t || ArtistService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ArtistService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ArtistService,\n    factory: ArtistService.ɵfac,\n    providedIn: 'root'\n  });\n  return ArtistService;\n})();","map":null,"metadata":{},"sourceType":"module"}