{"ast":null,"code":"import { Observable, of, take, throwError } from 'rxjs';\nexport class FuseMockApiHandler {\n  /**\n   * Constructor\n   */\n  constructor(url, delay) {\n    this.url = url;\n    this.delay = delay; // Private\n\n    this._reply = undefined;\n    this._replyCount = 0;\n    this._replied = 0;\n  } // -----------------------------------------------------------------------------------------------------\n  // @ Accessors\n  // -----------------------------------------------------------------------------------------------------\n\n  /**\n   * Getter for response callback\n   */\n\n\n  get response() {\n    // If the execution limit has been reached, throw an error\n    if (this._replyCount > 0 && this._replyCount <= this._replied) {\n      return throwError('Execution limit has been reached!');\n    } // If the response callback has not been set, throw an error\n\n\n    if (!this._reply) {\n      return throwError('Response callback function does not exist!');\n    } // If the request has not been set, throw an error\n\n\n    if (!this.request) {\n      return throwError('Request does not exist!');\n    } // Increase the replied count\n\n\n    this._replied++; // Execute the reply callback\n\n    const replyResult = this._reply({\n      request: this.request,\n      urlParams: this.urlParams\n    }); // If the result of the reply callback is an observable...\n\n\n    if (replyResult instanceof Observable) {\n      // Return the result as it is\n      return replyResult.pipe(take(1));\n    } // Otherwise, return the result as an observable\n\n\n    return of(replyResult).pipe(take(1));\n  } // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n\n  /**\n   * Reply\n   *\n   * @param callback\n   */\n\n\n  reply(callback) {\n    // Store the reply\n    this._reply = callback;\n  }\n  /**\n   * Reply count\n   *\n   * @param count\n   */\n\n\n  replyCount(count) {\n    // Store the reply count\n    this._replyCount = count;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}