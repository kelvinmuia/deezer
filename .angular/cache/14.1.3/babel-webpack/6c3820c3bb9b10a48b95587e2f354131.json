{"ast":null,"code":"import { cloneDeep } from 'lodash-es';\nimport { compactNavigation, defaultNavigation, futuristicNavigation, horizontalNavigation } from 'app/mock-api/common/navigation/data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/lib/mock-api\";\nexport let NavigationMockApi = /*#__PURE__*/(() => {\n  class NavigationMockApi {\n    /**\n     * Constructor\n     */\n    constructor(_fuseMockApiService) {\n      this._fuseMockApiService = _fuseMockApiService;\n      this._compactNavigation = compactNavigation;\n      this._defaultNavigation = defaultNavigation;\n      this._futuristicNavigation = futuristicNavigation;\n      this._horizontalNavigation = horizontalNavigation; // Register Mock API handlers\n\n      this.registerHandlers();\n    } // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Register Mock API handlers\n     */\n\n\n    registerHandlers() {\n      // -----------------------------------------------------------------------------------------------------\n      // @ Navigation - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/common/navigation').reply(() => {\n        // Fill compact navigation children using the default navigation\n        this._compactNavigation.forEach(compactNavItem => {\n          this._defaultNavigation.forEach(defaultNavItem => {\n            if (defaultNavItem.id === compactNavItem.id) {\n              compactNavItem.children = cloneDeep(defaultNavItem.children);\n            }\n          });\n        }); // Fill futuristic navigation children using the default navigation\n\n\n        this._futuristicNavigation.forEach(futuristicNavItem => {\n          this._defaultNavigation.forEach(defaultNavItem => {\n            if (defaultNavItem.id === futuristicNavItem.id) {\n              futuristicNavItem.children = cloneDeep(defaultNavItem.children);\n            }\n          });\n        }); // Fill horizontal navigation children using the default navigation\n\n\n        this._horizontalNavigation.forEach(horizontalNavItem => {\n          this._defaultNavigation.forEach(defaultNavItem => {\n            if (defaultNavItem.id === horizontalNavItem.id) {\n              horizontalNavItem.children = cloneDeep(defaultNavItem.children);\n            }\n          });\n        }); // Return the response\n\n\n        return [200, {\n          compact: cloneDeep(this._compactNavigation),\n          default: cloneDeep(this._defaultNavigation),\n          futuristic: cloneDeep(this._futuristicNavigation),\n          horizontal: cloneDeep(this._horizontalNavigation)\n        }];\n      });\n    }\n\n  }\n\n  NavigationMockApi.ɵfac = function NavigationMockApi_Factory(t) {\n    return new (t || NavigationMockApi)(i0.ɵɵinject(i1.FuseMockApiService));\n  };\n\n  NavigationMockApi.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NavigationMockApi,\n    factory: NavigationMockApi.ɵfac,\n    providedIn: 'root'\n  });\n  return NavigationMockApi;\n})();","map":null,"metadata":{},"sourceType":"module"}