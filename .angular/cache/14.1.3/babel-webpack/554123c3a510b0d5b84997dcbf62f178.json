{"ast":null,"code":"import { map, ReplaySubject, switchMap } from 'rxjs';\nimport { fromPairs } from 'lodash-es';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/cdk/layout\";\nimport * as i2 from \"@fuse/services/config\";\nexport let FuseMediaWatcherService = /*#__PURE__*/(() => {\n  class FuseMediaWatcherService {\n    /**\n     * Constructor\n     */\n    constructor(_breakpointObserver, _fuseConfigService) {\n      this._breakpointObserver = _breakpointObserver;\n      this._fuseConfigService = _fuseConfigService;\n      this._onMediaChange = new ReplaySubject(1);\n\n      this._fuseConfigService.config$.pipe(map(config => fromPairs(Object.entries(config.screens).map(([alias, screen]) => [alias, `(min-width: ${screen})`]))), switchMap(screens => this._breakpointObserver.observe(Object.values(screens)).pipe(map(state => {\n        // Prepare the observable values and set their defaults\n        const matchingAliases = [];\n        const matchingQueries = {}; // Get the matching breakpoints and use them to fill the subject\n\n        const matchingBreakpoints = Object.entries(state.breakpoints).filter(([query, matches]) => matches) ?? [];\n\n        for (const [query] of matchingBreakpoints) {\n          // Find the alias of the matching query\n          const matchingAlias = Object.entries(screens).find(([alias, q]) => q === query)[0]; // Add the matching query to the observable values\n\n          if (matchingAlias) {\n            matchingAliases.push(matchingAlias);\n            matchingQueries[matchingAlias] = query;\n          }\n        } // Execute the observable\n\n\n        this._onMediaChange.next({\n          matchingAliases,\n          matchingQueries\n        });\n      })))).subscribe();\n    } // -----------------------------------------------------------------------------------------------------\n    // @ Accessors\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Getter for _onMediaChange\n     */\n\n\n    get onMediaChange$() {\n      return this._onMediaChange.asObservable();\n    } // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On media query change\n     *\n     * @param query\n     */\n\n\n    onMediaQueryChange$(query) {\n      return this._breakpointObserver.observe(query);\n    }\n\n  }\n\n  FuseMediaWatcherService.ɵfac = function FuseMediaWatcherService_Factory(t) {\n    return new (t || FuseMediaWatcherService)(i0.ɵɵinject(i1.BreakpointObserver), i0.ɵɵinject(i2.FuseConfigService));\n  };\n\n  FuseMediaWatcherService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FuseMediaWatcherService,\n    factory: FuseMediaWatcherService.ɵfac\n  });\n  return FuseMediaWatcherService;\n})();","map":null,"metadata":{},"sourceType":"module"}