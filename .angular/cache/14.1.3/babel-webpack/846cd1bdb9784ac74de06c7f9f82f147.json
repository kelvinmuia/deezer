{"ast":null,"code":"import { cloneDeep } from 'lodash-es';\nimport { defaultNavigation } from 'app/mock-api/common/navigation/data';\nimport { contacts } from 'app/mock-api/apps/contacts/data';\nimport { tasks } from 'app/mock-api/apps/tasks/data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/lib/mock-api\";\nimport * as i2 from \"@fuse/components/navigation\";\nexport let SearchMockApi = /*#__PURE__*/(() => {\n  class SearchMockApi {\n    /**\n     * Constructor\n     */\n    constructor(_fuseMockApiService, _fuseNavigationService) {\n      this._fuseMockApiService = _fuseMockApiService;\n      this._fuseNavigationService = _fuseNavigationService;\n      this._defaultNavigation = defaultNavigation;\n      this._contacts = contacts;\n      this._tasks = tasks; // Register Mock API handlers\n\n      this.registerHandlers();\n    } // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Register Mock API handlers\n     */\n\n\n    registerHandlers() {\n      // Get the flat navigation and store it\n      const flatNavigation = this._fuseNavigationService.getFlatNavigation(this._defaultNavigation); // -----------------------------------------------------------------------------------------------------\n      // @ Search results - GET\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onPost('api/common/search').reply(({\n        request\n      }) => {\n        // Get the search query\n        const query = cloneDeep(request.body.query.toLowerCase()); // If the search query is an empty string,\n        // return an empty array\n\n        if (query === '') {\n          return [200, {\n            results: []\n          }];\n        } // Filter the contacts\n\n\n        const contactsResults = cloneDeep(this._contacts).filter(contact => contact.name.toLowerCase().includes(query)); // Filter the navigation\n\n        const pagesResults = cloneDeep(flatNavigation).filter(page => page.title?.toLowerCase().includes(query) || page.subtitle && page.subtitle.includes(query)); // Filter the tasks\n\n        const tasksResults = cloneDeep(this._tasks).filter(task => task.title.toLowerCase().includes(query)); // Prepare the results array\n\n        const results = []; // If there are contacts results...\n\n        if (contactsResults.length > 0) {\n          // Normalize the results\n          contactsResults.forEach(result => {\n            // Add a link\n            result.link = '/apps/contacts/' + result.id; // Add the name as the value\n\n            result.value = result.name;\n          }); // Add to the results\n\n          results.push({\n            id: 'contacts',\n            label: 'Contacts',\n            results: contactsResults\n          });\n        } // If there are page results...\n\n\n        if (pagesResults.length > 0) {\n          // Normalize the results\n          pagesResults.forEach(result => {\n            // Add the page title as the value\n            result.value = result.title;\n          }); // Add to the results\n\n          results.push({\n            id: 'pages',\n            label: 'Pages',\n            results: pagesResults\n          });\n        } // If there are tasks results...\n\n\n        if (tasksResults.length > 0) {\n          // Normalize the results\n          tasksResults.forEach(result => {\n            // Add a link\n            result.link = '/apps/tasks/' + result.id; // Add the title as the value\n\n            result.value = result.title;\n          }); // Add to the results\n\n          results.push({\n            id: 'tasks',\n            label: 'Tasks',\n            results: tasksResults\n          });\n        } // Return the response\n\n\n        return [200, results];\n      });\n    }\n\n  }\n\n  SearchMockApi.ɵfac = function SearchMockApi_Factory(t) {\n    return new (t || SearchMockApi)(i0.ɵɵinject(i1.FuseMockApiService), i0.ɵɵinject(i2.FuseNavigationService));\n  };\n\n  SearchMockApi.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SearchMockApi,\n    factory: SearchMockApi.ɵfac,\n    providedIn: 'root'\n  });\n  return SearchMockApi;\n})();","map":null,"metadata":{},"sourceType":"module"}