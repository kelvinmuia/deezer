{"ast":null,"code":"// -----------------------------------------------------------------------------------------------------\n// @ AUTH UTILITIES\n//\n// Methods are derivations of the Auth0 Angular-JWT helper service methods\n// https://github.com/auth0/angular2-jwt\n// -----------------------------------------------------------------------------------------------------\nexport class AuthUtils {\n  /**\n   * Constructor\n   */\n  constructor() {} // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n\n  /**\n   * Is token expired?\n   *\n   * @param token\n   * @param offsetSeconds\n   */\n\n\n  static isTokenExpired(token, offsetSeconds) {\n    // Return if there is no token\n    if (!token || token === '') {\n      return true;\n    } // Get the expiration date\n\n\n    const date = this._getTokenExpirationDate(token);\n\n    offsetSeconds = offsetSeconds || 0;\n\n    if (date === null) {\n      return true;\n    } // Check if the token is expired\n\n\n    return !(date.valueOf() > new Date().valueOf() + offsetSeconds * 1000);\n  } // -----------------------------------------------------------------------------------------------------\n  // @ Private methods\n  // -----------------------------------------------------------------------------------------------------\n\n  /**\n   * Base64 decoder\n   * Credits: https://github.com/atk\n   *\n   * @param str\n   * @private\n   */\n\n\n  static _b64decode(str) {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n    let output = '';\n    str = String(str).replace(/=+$/, '');\n\n    if (str.length % 4 === 1) {\n      throw new Error('\\'atob\\' failed: The string to be decoded is not correctly encoded.');\n    }\n    /* eslint-disable */\n\n\n    for ( // initialize result and counters\n    let bc = 0, bs, buffer, idx = 0; // get next character\n    buffer = str.charAt(idx++); // character found in table? initialize bit storage and add its ascii value;\n    ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, // and if not first of each 4 characters,\n    // convert the first 8 bits to one ascii character\n    bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {\n      // try to find character in table (0-63, not found => -1)\n      buffer = chars.indexOf(buffer);\n    }\n    /* eslint-enable */\n\n\n    return output;\n  }\n  /**\n   * Base64 unicode decoder\n   *\n   * @param str\n   * @private\n   */\n\n\n  static _b64DecodeUnicode(str) {\n    return decodeURIComponent(Array.prototype.map.call(this._b64decode(str), c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));\n  }\n  /**\n   * URL Base 64 decoder\n   *\n   * @param str\n   * @private\n   */\n\n\n  static _urlBase64Decode(str) {\n    let output = str.replace(/-/g, '+').replace(/_/g, '/');\n\n    switch (output.length % 4) {\n      case 0:\n        {\n          break;\n        }\n\n      case 2:\n        {\n          output += '==';\n          break;\n        }\n\n      case 3:\n        {\n          output += '=';\n          break;\n        }\n\n      default:\n        {\n          throw Error('Illegal base64url string!');\n        }\n    }\n\n    return this._b64DecodeUnicode(output);\n  }\n  /**\n   * Decode token\n   *\n   * @param token\n   * @private\n   */\n\n\n  static _decodeToken(token) {\n    // Return if there is no token\n    if (!token) {\n      return null;\n    } // Split the token\n\n\n    const parts = token.split('.');\n\n    if (parts.length !== 3) {\n      throw new Error('The inspected token doesn\\'t appear to be a JWT. Check to make sure it has three parts and see https://jwt.io for more.');\n    } // Decode the token using the Base64 decoder\n\n\n    const decoded = this._urlBase64Decode(parts[1]);\n\n    if (!decoded) {\n      throw new Error('Cannot decode the token.');\n    }\n\n    return JSON.parse(decoded);\n  }\n  /**\n   * Get token expiration date\n   *\n   * @param token\n   * @private\n   */\n\n\n  static _getTokenExpirationDate(token) {\n    // Get the decoded token\n    const decodedToken = this._decodeToken(token); // Return if the decodedToken doesn't have an 'exp' field\n\n\n    if (!decodedToken.hasOwnProperty('exp')) {\n      return null;\n    } // Convert the expiration date\n\n\n    const date = new Date(0);\n    date.setUTCSeconds(decodedToken.exp);\n    return date;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}