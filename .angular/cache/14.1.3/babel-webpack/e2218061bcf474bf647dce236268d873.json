{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let FuseNavigationService = /*#__PURE__*/(() => {\n  class FuseNavigationService {\n    /**\n     * Constructor\n     */\n    constructor() {\n      this._componentRegistry = new Map();\n      this._navigationStore = new Map();\n    } // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Register navigation component\n     *\n     * @param name\n     * @param component\n     */\n\n\n    registerComponent(name, component) {\n      this._componentRegistry.set(name, component);\n    }\n    /**\n     * Deregister navigation component\n     *\n     * @param name\n     */\n\n\n    deregisterComponent(name) {\n      this._componentRegistry.delete(name);\n    }\n    /**\n     * Get navigation component from the registry\n     *\n     * @param name\n     */\n\n\n    getComponent(name) {\n      return this._componentRegistry.get(name);\n    }\n    /**\n     * Store the given navigation with the given key\n     *\n     * @param key\n     * @param navigation\n     */\n\n\n    storeNavigation(key, navigation) {\n      // Add to the store\n      this._navigationStore.set(key, navigation);\n    }\n    /**\n     * Get navigation from storage by key\n     *\n     * @param key\n     */\n\n\n    getNavigation(key) {\n      return this._navigationStore.get(key) ?? [];\n    }\n    /**\n     * Delete the navigation from the storage\n     *\n     * @param key\n     */\n\n\n    deleteNavigation(key) {\n      // Check if the navigation exists\n      if (!this._navigationStore.has(key)) {\n        console.warn(`Navigation with the key '${key}' does not exist in the store.`);\n      } // Delete from the storage\n\n\n      this._navigationStore.delete(key);\n    }\n    /**\n     * Utility function that returns a flattened\n     * version of the given navigation array\n     *\n     * @param navigation\n     * @param flatNavigation\n     */\n\n\n    getFlatNavigation(navigation, flatNavigation = []) {\n      for (const item of navigation) {\n        if (item.type === 'basic') {\n          flatNavigation.push(item);\n          continue;\n        }\n\n        if (item.type === 'aside' || item.type === 'collapsable' || item.type === 'group') {\n          if (item.children) {\n            this.getFlatNavigation(item.children, flatNavigation);\n          }\n        }\n      }\n\n      return flatNavigation;\n    }\n    /**\n     * Utility function that returns the item\n     * with the given id from given navigation\n     *\n     * @param id\n     * @param navigation\n     */\n\n\n    getItem(id, navigation) {\n      for (const item of navigation) {\n        if (item.id === id) {\n          return item;\n        }\n\n        if (item.children) {\n          const childItem = this.getItem(id, item.children);\n\n          if (childItem) {\n            return childItem;\n          }\n        }\n      }\n\n      return null;\n    }\n    /**\n     * Utility function that returns the item's parent\n     * with the given id from given navigation\n     *\n     * @param id\n     * @param navigation\n     * @param parent\n     */\n\n\n    getItemParent(id, navigation, parent) {\n      for (const item of navigation) {\n        if (item.id === id) {\n          return parent;\n        }\n\n        if (item.children) {\n          const childItem = this.getItemParent(id, item.children, item);\n\n          if (childItem) {\n            return childItem;\n          }\n        }\n      }\n\n      return null;\n    }\n\n  }\n\n  FuseNavigationService.ɵfac = function FuseNavigationService_Factory(t) {\n    return new (t || FuseNavigationService)();\n  };\n\n  FuseNavigationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FuseNavigationService,\n    factory: FuseNavigationService.ɵfac,\n    providedIn: 'root'\n  });\n  return FuseNavigationService;\n})();","map":null,"metadata":{},"sourceType":"module"}