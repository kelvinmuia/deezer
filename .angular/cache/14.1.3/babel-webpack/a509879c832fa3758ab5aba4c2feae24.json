{"ast":null,"code":"import { TemplateRef } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/button\";\nimport * as i2 from \"@angular/material/icon\";\nimport * as i3 from \"@angular/material/tooltip\";\nimport * as i4 from \"@angular/common\";\n\nfunction FuseFullscreenComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-icon\", 3);\n  }\n\n  if (rf & 2) {\n    i0.ɵɵproperty(\"svgIcon\", \"heroicons_outline:arrows-expand\");\n  }\n}\n\nexport let FuseFullscreenComponent = /*#__PURE__*/(() => {\n  class FuseFullscreenComponent {\n    /**\n     * Constructor\n     */\n    constructor(_document) {\n      this._document = _document;\n      this._isFullscreen = false;\n      this._fsDoc = _document;\n    } // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n\n\n    ngOnInit() {\n      this._fsDocEl = document.documentElement;\n    } // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Toggle the fullscreen mode\n     */\n\n\n    toggleFullscreen() {\n      // Check if the fullscreen is open\n      this._isFullscreen = this._getBrowserFullscreenElement() !== null; // Toggle the fullscreen\n\n      if (this._isFullscreen) {\n        this._closeFullscreen();\n      } else {\n        this._openFullscreen();\n      }\n    } // -----------------------------------------------------------------------------------------------------\n    // @ Private methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Get browser's fullscreen element\n     *\n     * @private\n     */\n\n\n    _getBrowserFullscreenElement() {\n      if (typeof this._fsDoc.fullscreenElement !== 'undefined') {\n        return this._fsDoc.fullscreenElement;\n      }\n\n      if (typeof this._fsDoc.mozFullScreenElement !== 'undefined') {\n        return this._fsDoc.mozFullScreenElement;\n      }\n\n      if (typeof this._fsDoc.msFullscreenElement !== 'undefined') {\n        return this._fsDoc.msFullscreenElement;\n      }\n\n      if (typeof this._fsDoc.webkitFullscreenElement !== 'undefined') {\n        return this._fsDoc.webkitFullscreenElement;\n      }\n\n      throw new Error('Fullscreen mode is not supported by this browser');\n    }\n    /**\n     * Open the fullscreen\n     *\n     * @private\n     */\n\n\n    _openFullscreen() {\n      if (this._fsDocEl.requestFullscreen) {\n        this._fsDocEl.requestFullscreen();\n\n        return;\n      } // Firefox\n\n\n      if (this._fsDocEl.mozRequestFullScreen) {\n        this._fsDocEl.mozRequestFullScreen();\n\n        return;\n      } // Chrome, Safari and Opera\n\n\n      if (this._fsDocEl.webkitRequestFullscreen) {\n        this._fsDocEl.webkitRequestFullscreen();\n\n        return;\n      } // IE/Edge\n\n\n      if (this._fsDocEl.msRequestFullscreen) {\n        this._fsDocEl.msRequestFullscreen();\n\n        return;\n      }\n    }\n    /**\n     * Close the fullscreen\n     *\n     * @private\n     */\n\n\n    _closeFullscreen() {\n      if (this._fsDoc.exitFullscreen) {\n        this._fsDoc.exitFullscreen();\n\n        return;\n      } // Firefox\n\n\n      if (this._fsDoc.mozCancelFullScreen) {\n        this._fsDoc.mozCancelFullScreen();\n\n        return;\n      } // Chrome, Safari and Opera\n\n\n      if (this._fsDoc.webkitExitFullscreen) {\n        this._fsDoc.webkitExitFullscreen();\n\n        return;\n      } // IE/Edge\n      else if (this._fsDoc.msExitFullscreen) {\n        this._fsDoc.msExitFullscreen();\n\n        return;\n      }\n    }\n\n  }\n\n  FuseFullscreenComponent.ɵfac = function FuseFullscreenComponent_Factory(t) {\n    return new (t || FuseFullscreenComponent)(i0.ɵɵdirectiveInject(DOCUMENT));\n  };\n\n  FuseFullscreenComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FuseFullscreenComponent,\n    selectors: [[\"fuse-fullscreen\"]],\n    inputs: {\n      iconTpl: \"iconTpl\",\n      tooltip: \"tooltip\"\n    },\n    exportAs: [\"fuseFullscreen\"],\n    decls: 4,\n    vars: 2,\n    consts: [[\"mat-icon-button\", \"\", 3, \"matTooltip\", \"click\"], [3, \"ngTemplateOutlet\"], [\"defaultIconTpl\", \"\"], [3, \"svgIcon\"]],\n    template: function FuseFullscreenComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function FuseFullscreenComponent_Template_button_click_0_listener() {\n          return ctx.toggleFullscreen();\n        });\n        i0.ɵɵelementContainer(1, 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(2, FuseFullscreenComponent_ng_template_2_Template, 1, 1, \"ng-template\", null, 2, i0.ɵɵtemplateRefExtractor);\n      }\n\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(3);\n\n        i0.ɵɵproperty(\"matTooltip\", ctx.tooltip || \"Toggle Fullscreen\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.iconTpl || _r0);\n      }\n    },\n    dependencies: [i1.MatButton, i2.MatIcon, i3.MatTooltip, i4.NgTemplateOutlet],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return FuseFullscreenComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}