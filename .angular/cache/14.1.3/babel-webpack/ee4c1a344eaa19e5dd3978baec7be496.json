{"ast":null,"code":"import { cloneDeep } from 'lodash-es';\nimport { labels as labelsData, notes as notesData } from 'app/mock-api/apps/notes/data';\nimport { FuseMockApiUtils } from '@fuse/lib/mock-api';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/lib/mock-api/mock-api.service\";\nexport let NotesMockApi = /*#__PURE__*/(() => {\n  class NotesMockApi {\n    /**\n     * Constructor\n     */\n    constructor(_fuseMockApiService) {\n      this._fuseMockApiService = _fuseMockApiService;\n      this._labels = labelsData;\n      this._notes = notesData; // Register Mock API handlers\n\n      this.registerHandlers();\n    } // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Register Mock API handlers\n     */\n\n\n    registerHandlers() {\n      // -----------------------------------------------------------------------------------------------------\n      // @ Labels - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/apps/notes/labels').reply(() => [200, cloneDeep(this._labels)]); // -----------------------------------------------------------------------------------------------------\n      // @ Labels - POST\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onPost('api/apps/notes/labels').reply(({\n        request\n      }) => {\n        // Create a new label\n        const label = {\n          id: FuseMockApiUtils.guid(),\n          title: request.body.title\n        }; // Update the labels\n\n        this._labels.push(label);\n\n        return [200, cloneDeep(this._labels)];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ Labels - PATCH\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onPatch('api/apps/notes/labels').reply(({\n        request\n      }) => {\n        // Get label\n        const updatedLabel = request.body.label; // Update the label\n\n        this._labels = this._labels.map(label => {\n          if (label.id === updatedLabel.id) {\n            return { ...label,\n              title: updatedLabel.title\n            };\n          }\n\n          return label;\n        });\n        return [200, cloneDeep(this._labels)];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ Labels - DELETE\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onDelete('api/apps/notes/labels').reply(({\n        request\n      }) => {\n        // Get label id\n        const id = request.params.get('id'); // Delete the label\n\n        this._labels = this._labels.filter(label => label.id !== id); // Go through notes and delete the label\n\n        this._notes = this._notes.map(note => ({ ...note,\n          labels: note.labels.filter(item => item !== id)\n        }));\n        return [200, cloneDeep(this._labels)];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ Note Tasks - POST\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onPost('api/apps/notes/tasks').reply(({\n        request\n      }) => {\n        // Get note and task\n        let updatedNote = request.body.note;\n        const task = request.body.task; // Update the note\n\n        this._notes = this._notes.map(note => {\n          if (note.id === updatedNote.id) {\n            // Update the tasks\n            if (!note.tasks) {\n              note.tasks = [];\n            }\n\n            note.tasks.push({\n              id: FuseMockApiUtils.guid(),\n              content: task,\n              completed: false\n            }); // Update the updatedNote with the new task\n\n            updatedNote = cloneDeep(note);\n            return { ...note\n            };\n          }\n\n          return note;\n        });\n        return [200, updatedNote];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ Notes - GET\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onGet('api/apps/notes/all').reply(() => {\n        // Clone the labels and notes\n        const labels = cloneDeep(this._labels);\n        let notes = cloneDeep(this._notes); // Attach the labels to the notes\n\n        notes = notes.map(note => ({ ...note,\n          labels: note.labels.map(labelId => labels.find(label => label.id === labelId))\n        }));\n        return [200, notes];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ Notes - POST\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onPost('api/apps/notes').reply(({\n        request\n      }) => {\n        // Get note\n        const note = request.body.note; // Add an id\n\n        note.id = FuseMockApiUtils.guid(); // Push the note\n\n        this._notes.push(note);\n\n        return [200, note];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ Notes - PATCH\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onPatch('api/apps/notes').reply(({\n        request\n      }) => {\n        // Get note\n        const updatedNote = request.body.updatedNote; // Update the note\n\n        this._notes = this._notes.map(note => {\n          if (note.id === updatedNote.id) {\n            return { ...updatedNote\n            };\n          }\n\n          return note;\n        });\n        return [200, updatedNote];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ Notes - DELETE\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onDelete('api/apps/notes').reply(({\n        request\n      }) => {\n        // Get the id\n        const id = request.params.get('id'); // Find the note and delete it\n\n        this._notes.forEach((item, index) => {\n          if (item.id === id) {\n            this._notes.splice(index, 1);\n          }\n        }); // Return the response\n\n\n        return [200, true];\n      });\n    }\n\n  }\n\n  NotesMockApi.ɵfac = function NotesMockApi_Factory(t) {\n    return new (t || NotesMockApi)(i0.ɵɵinject(i1.FuseMockApiService));\n  };\n\n  NotesMockApi.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NotesMockApi,\n    factory: NotesMockApi.ɵfac,\n    providedIn: 'root'\n  });\n  return NotesMockApi;\n})();","map":null,"metadata":{},"sourceType":"module"}