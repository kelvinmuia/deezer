{"ast":null,"code":"import { compact, fromPairs } from 'lodash-es';\nimport { FuseMockApiHandler } from '@fuse/lib/mock-api/mock-api.request-handler';\nimport * as i0 from \"@angular/core\";\nexport let FuseMockApiService = /*#__PURE__*/(() => {\n  class FuseMockApiService {\n    /**\n     * Constructor\n     */\n    constructor() {\n      this._handlers = {\n        'get': new Map(),\n        'post': new Map(),\n        'patch': new Map(),\n        'delete': new Map(),\n        'put': new Map(),\n        'head': new Map(),\n        'jsonp': new Map(),\n        'options': new Map()\n      };\n    } // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Find the handler from the service\n     * with the given method and url\n     *\n     * @param method\n     * @param url\n     */\n\n\n    findHandler(method, url) {\n      // Prepare the return object\n      const matchingHandler = {\n        handler: undefined,\n        urlParams: {}\n      }; // Split the url\n\n      const urlParts = url.split('/'); // Get all related request handlers\n\n      const handlers = this._handlers[method.toLowerCase()]; // Iterate through the handlers\n\n\n      handlers.forEach((handler, handlerUrl) => {\n        // Skip if there is already a matching handler\n        if (matchingHandler.handler) {\n          return;\n        } // Split the handler url\n\n\n        const handlerUrlParts = handlerUrl.split('/'); // Skip if the lengths of the urls we are comparing are not the same\n\n        if (urlParts.length !== handlerUrlParts.length) {\n          return;\n        } // Compare\n\n\n        const matches = handlerUrlParts.every((handlerUrlPart, index) => handlerUrlPart === urlParts[index] || handlerUrlPart.startsWith(':')); // If there is a match...\n\n        if (matches) {\n          // Assign the matching handler\n          matchingHandler.handler = handler; // Extract and assign the parameters\n\n          matchingHandler.urlParams = fromPairs(compact(handlerUrlParts.map((handlerUrlPart, index) => handlerUrlPart.startsWith(':') ? [handlerUrlPart.substring(1), urlParts[index]] : undefined)));\n        }\n      });\n      return matchingHandler;\n    }\n    /**\n     * Register GET request handler\n     *\n     * @param url - URL address of the mocked API endpoint\n     * @param delay - Delay of the response in milliseconds\n     */\n\n\n    onGet(url, delay) {\n      return this._registerHandler('get', url, delay);\n    }\n    /**\n     * Register POST request handler\n     *\n     * @param url - URL address of the mocked API endpoint\n     * @param delay - Delay of the response in milliseconds\n     */\n\n\n    onPost(url, delay) {\n      return this._registerHandler('post', url, delay);\n    }\n    /**\n     * Register PATCH request handler\n     *\n     * @param url - URL address of the mocked API endpoint\n     * @param delay - Delay of the response in milliseconds\n     */\n\n\n    onPatch(url, delay) {\n      return this._registerHandler('patch', url, delay);\n    }\n    /**\n     * Register DELETE request handler\n     *\n     * @param url - URL address of the mocked API endpoint\n     * @param delay - Delay of the response in milliseconds\n     */\n\n\n    onDelete(url, delay) {\n      return this._registerHandler('delete', url, delay);\n    }\n    /**\n     * Register PUT request handler\n     *\n     * @param url - URL address of the mocked API endpoint\n     * @param delay - Delay of the response in milliseconds\n     */\n\n\n    onPut(url, delay) {\n      return this._registerHandler('put', url, delay);\n    }\n    /**\n     * Register HEAD request handler\n     *\n     * @param url - URL address of the mocked API endpoint\n     * @param delay - Delay of the response in milliseconds\n     */\n\n\n    onHead(url, delay) {\n      return this._registerHandler('head', url, delay);\n    }\n    /**\n     * Register JSONP request handler\n     *\n     * @param url - URL address of the mocked API endpoint\n     * @param delay - Delay of the response in milliseconds\n     */\n\n\n    onJsonp(url, delay) {\n      return this._registerHandler('jsonp', url, delay);\n    }\n    /**\n     * Register OPTIONS request handler\n     *\n     * @param url - URL address of the mocked API endpoint\n     * @param delay - Delay of the response in milliseconds\n     */\n\n\n    onOptions(url, delay) {\n      return this._registerHandler('options', url, delay);\n    } // -----------------------------------------------------------------------------------------------------\n    // @ Private methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Register and return a new instance of the handler\n     *\n     * @param method\n     * @param url\n     * @param delay\n     * @private\n     */\n\n\n    _registerHandler(method, url, delay) {\n      // Create a new instance of FuseMockApiRequestHandler\n      const fuseMockHttp = new FuseMockApiHandler(url, delay); // Store the handler to access it from the interceptor\n\n      this._handlers[method].set(url, fuseMockHttp); // Return the instance\n\n\n      return fuseMockHttp;\n    }\n\n  }\n\n  FuseMockApiService.ɵfac = function FuseMockApiService_Factory(t) {\n    return new (t || FuseMockApiService)();\n  };\n\n  FuseMockApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FuseMockApiService,\n    factory: FuseMockApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return FuseMockApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}