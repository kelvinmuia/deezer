{"ast":null,"code":"import { assign, cloneDeep } from 'lodash-es';\nimport { FuseMockApiUtils } from '@fuse/lib/mock-api';\nimport { messages as messagesData } from 'app/mock-api/common/messages/data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/lib/mock-api\";\nexport let MessagesMockApi = /*#__PURE__*/(() => {\n  class MessagesMockApi {\n    /**\n     * Constructor\n     */\n    constructor(_fuseMockApiService) {\n      this._fuseMockApiService = _fuseMockApiService;\n      this._messages = messagesData; // Register Mock API handlers\n\n      this.registerHandlers();\n    } // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Register Mock API handlers\n     */\n\n\n    registerHandlers() {\n      // -----------------------------------------------------------------------------------------------------\n      // @ Messages - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/common/messages').reply(() => [200, cloneDeep(this._messages)]); // -----------------------------------------------------------------------------------------------------\n      // @ Messages - POST\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onPost('api/common/messages').reply(({\n        request\n      }) => {\n        // Get the message\n        const newMessage = cloneDeep(request.body.message); // Generate a new GUID\n\n        newMessage.id = FuseMockApiUtils.guid(); // Unshift the new message\n\n        this._messages.unshift(newMessage); // Return the response\n\n\n        return [200, newMessage];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ Messages - PATCH\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onPatch('api/common/messages').reply(({\n        request\n      }) => {\n        // Get the id and message\n        const id = request.body.id;\n        const message = cloneDeep(request.body.message); // Prepare the updated message\n\n        let updatedMessage = null; // Find the message and update it\n\n        this._messages.forEach((item, index, messages) => {\n          if (item.id === id) {\n            // Update the message\n            messages[index] = assign({}, messages[index], message); // Store the updated message\n\n            updatedMessage = messages[index];\n          }\n        }); // Return the response\n\n\n        return [200, updatedMessage];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ Messages - DELETE\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onDelete('api/common/messages').reply(({\n        request\n      }) => {\n        // Get the id\n        const id = request.params.get('id'); // Prepare the deleted message\n\n        let deletedMessage = null; // Find the message\n\n        const index = this._messages.findIndex(item => item.id === id); // Store the deleted message\n\n\n        deletedMessage = cloneDeep(this._messages[index]); // Delete the message\n\n        this._messages.splice(index, 1); // Return the response\n\n\n        return [200, deletedMessage];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ Mark all as read - GET\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onGet('api/common/messages/mark-all-as-read').reply(() => {\n        // Go through all messages\n        this._messages.forEach((item, index, messages) => {\n          // Mark it as read\n          messages[index].read = true;\n          messages[index].seen = true;\n        }); // Return the response\n\n\n        return [200, true];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ Toggle read status - POST\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onPost('api/common/messages/toggle-read-status').reply(({\n        request\n      }) => {\n        // Get the message\n        const message = cloneDeep(request.body.message); // Prepare the updated message\n\n        let updatedMessage = null; // Find the message and update it\n\n        this._messages.forEach((item, index, messages) => {\n          if (item.id === message.id) {\n            // Update the message\n            messages[index].read = message.read; // Store the updated message\n\n            updatedMessage = messages[index];\n          }\n        }); // Return the response\n\n\n        return [200, updatedMessage];\n      });\n    }\n\n  }\n\n  MessagesMockApi.ɵfac = function MessagesMockApi_Factory(t) {\n    return new (t || MessagesMockApi)(i0.ɵɵinject(i1.FuseMockApiService));\n  };\n\n  MessagesMockApi.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MessagesMockApi,\n    factory: MessagesMockApi.ɵfac,\n    providedIn: 'root'\n  });\n  return MessagesMockApi;\n})();","map":null,"metadata":{},"sourceType":"module"}