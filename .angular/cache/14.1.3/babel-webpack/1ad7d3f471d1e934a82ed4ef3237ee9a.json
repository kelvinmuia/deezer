{"ast":null,"code":"import { assign, cloneDeep } from 'lodash-es';\nimport { FuseMockApiUtils } from '@fuse/lib/mock-api';\nimport { boards as boardsData, cards as cardsData, labels as labelsData, lists as listsData, members as membersData } from 'app/mock-api/apps/scrumboard/data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/lib/mock-api\";\nexport let ScrumboardMockApi = /*#__PURE__*/(() => {\n  class ScrumboardMockApi {\n    /**\n     * Constructor\n     */\n    constructor(_fuseMockApiService) {\n      this._fuseMockApiService = _fuseMockApiService; // Private\n\n      this._boards = boardsData;\n      this._cards = cardsData;\n      this._labels = labelsData;\n      this._lists = listsData;\n      this._members = membersData; // Register Mock API handlers\n\n      this.registerHandlers();\n    } // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Register Mock API handlers\n     */\n\n\n    registerHandlers() {\n      // -----------------------------------------------------------------------------------------------------\n      // @ Boards - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/apps/scrumboard/boards').reply(({\n        request\n      }) => {\n        // Clone the boards\n        let boards = cloneDeep(this._boards); // Go through the boards and inject the members\n\n        boards = boards.map(board => ({ ...board,\n          members: board.members.map(boardMember => this._members.find(member => boardMember === member.id))\n        }));\n        return [200, boards];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ Board - GET\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onGet('api/apps/scrumboard/board').reply(({\n        request\n      }) => {\n        // Get the id\n        const id = request.params.get('id'); // Find the board\n\n        const board = this._boards.find(item => item.id === id); // Attach the board lists\n\n\n        board.lists = this._lists.filter(item => item.boardId === id).sort((a, b) => a.position - b.position); // Grab all cards that belong to this board and attach labels to them\n\n        let cards = this._cards.filter(item => item.boardId === id);\n\n        cards = cards.map(card => ({ ...card,\n          labels: card.labels.map(cardLabelId => this._labels.find(label => label.id === cardLabelId))\n        })); // Attach the board cards into corresponding lists\n\n        board.lists.forEach((list, index, array) => {\n          array[index].cards = cards.filter(item => item.boardId === id && item.listId === list.id).sort((a, b) => a.position - b.position);\n        }); // Attach the board labels\n\n        board.labels = this._labels.filter(item => item.boardId === id);\n        return [200, cloneDeep(board)];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ List - POST\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onPost('api/apps/scrumboard/board/list').reply(({\n        request\n      }) => {\n        // Get the list\n        const newList = cloneDeep(request.body.list); // Generate a new GUID\n\n        newList.id = FuseMockApiUtils.guid(); // Store the new list\n\n        this._lists.push(newList);\n\n        return [200, newList];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ List - PATCH\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onPatch('api/apps/scrumboard/board/list').reply(({\n        request\n      }) => {\n        // Get the list\n        const list = cloneDeep(request.body.list); // Prepare the updated list\n\n        let updatedList = null; // Find the list and update it\n\n        this._lists.forEach((item, index, lists) => {\n          if (item.id === list.id) {\n            // Update the list\n            lists[index] = assign({}, lists[index], list); // Store the updated list\n\n            updatedList = lists[index];\n          }\n        });\n\n        return [200, updatedList];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ Lists - PATCH\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onPatch('api/apps/scrumboard/board/lists').reply(({\n        request\n      }) => {\n        // Get the lists\n        const lists = cloneDeep(request.body.lists); // Prepare the updated lists\n\n        const updatedLists = []; // Go through the lists\n\n        lists.forEach(item => {\n          // Find the list\n          const index = this._lists.findIndex(list => item.id === list.id); // Update the list\n\n\n          this._lists[index] = assign({}, this._lists[index], item); // Store in the updated lists\n\n          updatedLists.push(item);\n        });\n        return [200, updatedLists];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ List - DELETE\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onDelete('api/apps/scrumboard/board/list').reply(({\n        request\n      }) => {\n        // Get the id\n        const id = request.params.get('id'); // Find the list and delete it\n\n        const index = this._lists.findIndex(item => item.id === id);\n\n        this._lists.splice(index, 1); // Filter out the cards that belonged to the list to delete them\n\n\n        this._cards = this._cards.filter(card => card.listId !== id);\n        return [200, true];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ Card - PUT\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onPut('api/apps/scrumboard/board/card').reply(({\n        request\n      }) => {\n        // Get the card\n        const newCard = cloneDeep(request.body.card); // Generate a new GUID\n\n        newCard.id = FuseMockApiUtils.guid(); // Unshift the new card\n\n        this._cards.push(newCard);\n\n        return [200, newCard];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ Card - PATCH\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onPatch('api/apps/scrumboard/board/card').reply(({\n        request\n      }) => {\n        // Get the id and card\n        const id = request.body.id;\n        const card = cloneDeep(request.body.card); // Prepare the updated card\n\n        let updatedCard = null; // Go through the labels and leave only ids of them\n\n        card.labels = card.labels.map(itemLabel => itemLabel.id); // Find the card and update it\n\n        this._cards.forEach((item, index, cards) => {\n          if (item.id === id) {\n            // Update the card\n            cards[index] = assign({}, cards[index], card); // Store the updated card\n\n            updatedCard = cloneDeep(cards[index]);\n          }\n        }); // Attach the labels of the card\n\n\n        updatedCard.labels = updatedCard.labels.map(cardLabelId => this._labels.find(label => label.id === cardLabelId));\n        return [200, updatedCard];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ Cards - PATCH\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onPatch('api/apps/scrumboard/board/cards').reply(({\n        request\n      }) => {\n        // Get the cards\n        const cards = cloneDeep(request.body.cards); // Prepare the updated cards\n\n        const updatedCards = []; // Go through the cards\n\n        cards.forEach(item => {\n          // Find the card\n          const index = this._cards.findIndex(card => item.id === card.id); // Go through the labels and leave only ids of them\n\n\n          item.labels = item.labels.map(itemLabel => itemLabel.id); // Update the card\n\n          this._cards[index] = assign({}, this._cards[index], item); // Attach the labels of the card\n\n          item.labels = item.labels.map(cardLabelId => this._labels.find(label => label.id === cardLabelId)); // Store in the updated cards\n\n          updatedCards.push(item);\n        });\n        return [200, updatedCards];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ Card - DELETE\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onDelete('api/apps/scrumboard/board/card').reply(({\n        request\n      }) => {\n        // Get the id\n        const id = request.params.get('id'); // Find the card and delete it\n\n        const index = this._cards.findIndex(item => item.id === id);\n\n        this._cards.splice(index, 1);\n\n        return [200, true];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ Card Positions - PATCH\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onPatch('api/apps/scrumboard/board/card/positions').reply(({\n        request\n      }) => {\n        // Get the cards\n        const cards = request.body.cards; // Go through the cards\n\n        this._cards.forEach(card => {\n          // Find this card's index within the cards array that comes with the request\n          // and assign that index as the new position number for the card\n          card.position = cards.findIndex(item => item.id === card.id && item.listId === card.listId && item.boardId === card.boardId);\n        }); // Clone the cards\n\n\n        const updatedCards = cloneDeep(this._cards);\n        return [200, updatedCards];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ Labels - GET\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onGet('api/apps/scrumboard/board/labels').reply(({\n        request\n      }) => {\n        // Get the board id\n        const boardId = request.params.get('boardId'); // Filter the labels\n\n        const labels = this._labels.filter(item => item.boardId === boardId);\n\n        return [200, cloneDeep(labels)];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ Label - PUT\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onPut('api/apps/scrumboard/board/label').reply(({\n        request\n      }) => {\n        // Get the label\n        const newLabel = cloneDeep(request.body.label); // Generate a new GUID\n\n        newLabel.id = FuseMockApiUtils.guid(); // Unshift the new label\n\n        this._labels.unshift(newLabel);\n\n        return [200, newLabel];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ Label - PATCH\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onPatch('api/apps/scrumboard/board/label').reply(({\n        request\n      }) => {\n        // Get the id and label\n        const id = request.body.id;\n        const label = cloneDeep(request.body.label); // Prepare the updated label\n\n        let updatedLabel = null; // Find the label and update it\n\n        this._labels.forEach((item, index, labels) => {\n          if (item.id === id) {\n            // Update the label\n            labels[index] = assign({}, labels[index], label); // Store the updated label\n\n            updatedLabel = labels[index];\n          }\n        });\n\n        return [200, updatedLabel];\n      }); // -----------------------------------------------------------------------------------------------------\n      // @ Label - DELETE\n      // -----------------------------------------------------------------------------------------------------\n\n\n      this._fuseMockApiService.onDelete('api/apps/scrumboard/board/label').reply(({\n        request\n      }) => {\n        // Get the id\n        const id = request.params.get('id'); // Find the label and delete it\n\n        const index = this._labels.findIndex(item => item.id === id);\n\n        this._labels.splice(index, 1); // Get the cards that have the label\n\n\n        const cardsWithLabel = this._cards.filter(card => card.labels.indexOf(id) > -1); // Iterate through them and remove the label\n\n\n        cardsWithLabel.forEach(card => {\n          card.tags.splice(card.tags.indexOf(id), 1);\n        });\n        return [200, true];\n      });\n    }\n\n  }\n\n  ScrumboardMockApi.ɵfac = function ScrumboardMockApi_Factory(t) {\n    return new (t || ScrumboardMockApi)(i0.ɵɵinject(i1.FuseMockApiService));\n  };\n\n  ScrumboardMockApi.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ScrumboardMockApi,\n    factory: ScrumboardMockApi.ɵfac,\n    providedIn: 'root'\n  });\n  return ScrumboardMockApi;\n})();","map":null,"metadata":{},"sourceType":"module"}